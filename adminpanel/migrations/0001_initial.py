# Generated by Django 3.0.8 on 2020-08-27 14:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    def load_initialdbrecords(apps, schema_editor):
        UserType = apps.get_model("adminpanel", "UserType")
        userAdmin = UserType(UserTypeId=1, Type='Admin')
        userAdmin.save()
        userPractitioner = UserType(UserTypeId=2, Type='Practitioner')
        userPractitioner.save()
        userConsultant = UserType(UserTypeId=3, Type='Consultant')
        userConsultant.save()
        userClient = UserType(UserTypeId=4, Type='Client')
        userClient.save()
        Group = apps.get_model("auth", "Group")
        AdminGroup = Group(id=1, name='Admin')
        AdminGroup.save()
        PracticeGroup = Group(id=2, name='Practitioner')
        PracticeGroup.save()
        ConsultantGroup = Group(id=3, name='Consultant')
        ConsultantGroup.save()
        ClientGroup = Group(id=4, name='Client')
        ClientGroup.save()

        Installment = apps.get_model("adminpanel", "Installmenttype")
        InstallmentService2 = Installment(Installment_Type_Id=1, Installment_Type='2 months',
                                          Description='"ProLongevity Lite" service provides 2 months installment plan.')
        InstallmentService2.save()
        InstallmentService6 = Installment(Installment_Type_Id=1, Installment_Type='6 months',
                                          Description='"ProLongevity Silver" service provides 6 months installment '
                                                      'plan.')
        InstallmentService6.save()
        InstallmentService12 = Installment(Installment_Type_Id=1, Installment_Type='12 months',
                                           Description='"ProLongevity Gold" service provides 12 months installment '
                                                       'plan.')
        InstallmentService12.save()

        DiscountType = apps.get_model("adminpanel", "DiscountType")

        DiscForFullPayment = DiscountType(Discount_Type_Id=1, DiscountCode='FULLPAY',
                                          DiscountDescription='Discount for Paying Full Amount in one go',
                                          Percentage="10", DiscountFrom="2020-08-01", DiscountTo="")
        DiscForFullPayment.save()
        DiscWithinFamily = DiscountType(Discount_Type_Id=2, DiscountCode='SAMEHOUSEHOLD',
                                        DiscountDescription='Discount for same house hold member.',
                                        Percentage="8", DiscountFrom="2020-08-01", DiscountTo="")
        DiscWithinFamily.save()
        DiscForReferral = DiscountType(Discount_Type_Id=3, DiscountCode='GET10REF',
                                       DiscountDescription='Discount for referring someone.',
                                       Percentage="5", DiscountFrom="2020-08-01", DiscountTo="")
        DiscForReferral.save()

        Configuration = apps.get_model("adminpanel", "Configuration")

        emailhost = Configuration(ConfigurationId=1, ConfigurationName='EMAIL_HOST',
                                  DisplayName='EMAIL_HOST',
                                  ConfigurationValue="smtp.gmail.com", Image='')
        emailhost.save()
        emailroot = Configuration(ConfigurationId=2, ConfigurationName='EMAIL_ROOT',
                                  DisplayName='EMAIL_ROOT',
                                  ConfigurationValue="587", Image='')
        emailroot.save()
        emailhostuser = Configuration(ConfigurationId=3, ConfigurationName='EMAIL_HOST_USER',
                                      DisplayName='EMAIL_HOST_USER',
                                      ConfigurationValue="prolongevity123@gmail.com", Image='')
        emailhostuser.save()
        emailhostpwd = Configuration(ConfigurationId=4, ConfigurationName='EMAIL_HOST_PASSWORD',
                                     DisplayName='EMAIL_HOST_PASSWORD',
                                     ConfigurationValue="zaq1ZAQ!", Image='')
        emailhostpwd.save()
        dashboardimg = Configuration(ConfigurationId=5, ConfigurationName='DASHBOARD_IMAGE',
                                     DisplayName='DASHBOARD_IMAGE',
                                     ConfigurationValue="", Image='dashboard.jpg')
        dashboardimg.save()

        OrderStatus = apps.get_model("adminpanel", "OrderStatus")

        orderPlaced = OrderStatus(OrderStatusId=1, OrderStatusType='Placed')
        orderPlaced.save()

        orderProcess = OrderStatus(OrderStatusId=2, OrderStatusType='Processed')
        orderProcess.save()

        orderDeliver = OrderStatus(OrderStatusId=3, OrderStatusType='Delivered')
        orderDeliver.save()

        orderCancel = OrderStatus(OrderStatusId=4, OrderStatusType='Canceled')
        orderCancel.save()

    def delete_initialdbrecords(apps, schema_editor):
        UserType = apps.get_model("adminpanel", "UserType")
        UserType.objects.all().delete()
        Group = apps.get_model("auth", "Group")
        Group.objects.all().delete()
        Installment = apps.get_model("adminpanel", "Installmenttype")
        Installment.objects.all().delete()
        DiscountType = apps.get_model("adminpanel", "DiscountType")
        DiscountType.objects.all().delete()
        Configuration = apps.get_model("adminpanel", "Configuration")
        Configuration.objects.all().delete()

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('Customer_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Phone_No', models.CharField(max_length=100)),
                ('Enrolled_Date', models.DateTimeField(auto_now_add=True, null=True)),
                ('First_Name', models.CharField(blank=True, max_length=200, null=True)),
                ('Last_Name', models.CharField(blank=True, max_length=200, null=True)),
                ('Email', models.CharField(blank=True, max_length=200, null=True)),
                ('Gender', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                              to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiscountType',
            fields=[
                ('Discount_Type_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Discount', models.CharField(max_length=50)),
                ('Percentage', models.IntegerField(null=True)),
                ('DiscountFrom', models.DateField(blank=True, null=True)),
                ('DiscountTo', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InstallmentType',
            fields=[
                ('Installment_Type_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Installment_Type', models.CharField(max_length=50)),
                ('Description', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('Order_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Order_Date', models.DateTimeField(auto_now_add=True, null=True)),
                ('IsOrderCompleted', models.BooleanField(blank=True, default=False, null=True)),
                ('Transaction_Id', models.CharField(max_length=200, null=True)),
                ('Customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               to='adminpanel.Customer')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('Product_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=255)),
                ('Code', models.CharField(max_length=255)),
                ('Description', models.CharField(max_length=2000)),
                ('Price', models.DecimalField(decimal_places=2, max_digits=7)),
                ('Image', models.ImageField(blank=True, null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('UserTypeId', models.AutoField(primary_key=True, serialize=False)),
                ('Type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('Payment_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Payment_Type', models.CharField(blank=True, max_length=50, null=True)),
                ('Amount', models.FloatField()),
                ('Date', models.DateTimeField(auto_now_add=True, null=True)),
                ('Is_Invoice_Sent', models.BooleanField()),
                ('Discount_Type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                    to='adminpanel.DiscountType')),
                ('Installment_Type',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   to='adminpanel.InstallmentType')),
                ('Order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                            to='adminpanel.Order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Quantity', models.IntegerField(blank=True, default=0, null=True)),
                ('Date_Added', models.DateTimeField(auto_now_add=True, null=True)),
                ('Order', models.ForeignKey(blank=True, db_column='Order_Id', null=True,
                                            on_delete=django.db.models.deletion.CASCADE, to='adminpanel.Order')),
                ('Product', models.ForeignKey(blank=True, db_column='Product_Id', null=True,
                                              on_delete=django.db.models.deletion.CASCADE, to='adminpanel.Product')),
            ],
        ),
        migrations.CreateModel(
            name='InstallmentDue',
            fields=[
                ('Installment_Due_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Due_Installments', models.IntegerField()),
                ('Installment_Type_Id',
                 models.ForeignKey(db_column='Installment_Type_Id', on_delete=django.db.models.deletion.CASCADE,
                                   to='adminpanel.InstallmentType')),
                ('Order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                            to='adminpanel.Order')),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('Address_Id', models.AutoField(primary_key=True, serialize=False)),
                ('Addressline1', models.CharField(blank=True, max_length=255, null=True)),
                ('Addressline2', models.CharField(blank=True, max_length=255, null=True)),
                ('Addressline3', models.CharField(blank=True, max_length=255, null=True)),
                ('City', models.CharField(blank=True, max_length=100, null=True)),
                ('State', models.CharField(blank=True, max_length=100, null=True)),
                ('Postal_Code', models.CharField(blank=True, max_length=50, null=True)),
                ('Country', models.CharField(blank=True, max_length=100, null=True)),
                ('Customer_Id', models.ForeignKey(blank=True, db_column='Customer_Id', null=True,
                                                  on_delete=django.db.models.deletion.CASCADE,
                                                  to='adminpanel.Customer')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='user_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='adminpanel.UserType'),
        ),
        migrations.RunPython(load_initialdbrecords, delete_initialdbrecords),
    ]
